openapi: 3.0.0
info:
  title: WasaPhoto
  version: 1.0.0
  description: |
    This is a simple API for a photo sharing service.
    You can upload photos, like photos, and comment on photos.
    You can also see who has liked or commented on a photo.
    This API is meant to be used with the WasaPhoto web application.
    You can find the source code for the web application 
    at https://github.com/matteo-mariotti/WASA_Photo_2022_2023

tags:
  - name: login
    description: Login
  - name: photo
    description: Operations about photos
  - name: users
    description: Operations about users
  - name: home
    description: Operations about the stream
  - name: profile
    description: Operations about the logged user profile
  - name: ban
    description: Operations about banning/unbanning users
  - name: follow
    description: Operations about foloowing/unfollowing users

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    identifier:
      type: string
      pattern: "^[a-z0-9-]*$"
      description: identifier
      example: "6d459789-1a3b-4f0e-a64e-3ebd8e2e8e0b"
      maxLength: 36
      minLength: 36

    commentID:
      type: integer
      description: comment identifier
      example: 1

    comment:
      description: Comment
      type: object
      properties:
        commentID:
          $ref: "#/components/schemas/commentID"
        userID:
          $ref: "#/components/schemas/identifier"
        text:
          type: string
          pattern: '.*'
          description: comment
          example: "This is a comment"
          minLength: 1
          maxLength: 256

    like:
      type: object
      properties:
        userID:
          $ref: "#/components/schemas/identifier"

    photoID:
      type: integer
      description: photo identifier
      example: 1

    photo:
      description: A photo
      type: object
      properties:
        id:
          $ref: "#/components/schemas/photoID"
        photoOwner:
          $ref: "#/components/schemas/identifier"
        datetime:
          type: string
          format: date-time
          description: date and time of the upload
          example: "2021-12-31 23:59:59"
          maxLength: 20
          minLength: 0
        likes:
          description: Number of likes
          type: integer
        comments:
          description: number of comments
          type: integer
        loggedLike:
          description: True if the logged user has liked this photo
          type: boolean

    username:
      type: string
      pattern: '.*'
      description: username
      example: "Luke Skywalker"
      maxLength: 16
      minLength: 3

    profile:
      description: user profile
      type: object
      properties:
        username:
          $ref: "#/components/schemas/username"
        photosCount:
          description: Number of photos uploaded by the user
          type: integer
        followers:
          description: Number of users following the user
          type: integer
        following:
          description: Number of users followed by the user
          type: integer

    error:
      description: Error message
      type: object
      properties:
        message:
          description: Error message
          type: string
          example: "Message error!"

    userDetails:
      type: object
      description: User details
      properties:
        name:
          $ref: "#/components/schemas/username"

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"

security:
  - BearerAuth: []

paths:
  /session:
    post:
      security: [] #No security is required to login into the application
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userDetails"
        required: true
      responses:
        "200":
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/identifier"
        "201":
          description: User log-in action successful (new user created)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/identifier"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /stream:
    get:
      description: Returns the photos of the users that the user is following (the stream)
      summary: Returns the stream
      tags: ["home"]
      operationId: getMyStream
      responses:
        "200":
          description: Photos of the users that the user is following
          content:
            application/json:
              schema:
                description: Photos of the users that the user is following
                type: array
                items:
                  $ref: "#/components/schemas/photo"
                minItems: 0
                maxItems: 100 #The stream is limited to 100 photos per chunk of data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      
  /photos/{photoID}:
    get:
      description: Returns the photo (binary value) with the specified identifier (photoID)
      summary: Returns the photo
      tags: ["photo"]
      operationId: getPhoto
      parameters:
        - name: photoID
          in: path
          description: Photo identifier
          required: true
          schema:
            $ref: "#/components/schemas/photoID"
      responses:
        "200":
          description: Photo with the specified identifier
          content:
            image/*:
              schema:
                description: Photo with the specified identifier
                type: string
                format: binary
                minLength: 8388608 # 1MB
                maxLength: 83886080 # 10MB
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"          

# NOT requested, future implementation
#  /photos/{photoID}/likes:
#     get:
#       description: Returns the list of users that liked the photo with the specified identifier (photoID)
#       summary: Returns the list of users that liked the photo
#       tags: ["photo"]
#       operationId: getPhotoLikes
#       parameters:
#         - name: photoID
#           in: path
#           description: Photo identifier
#           required: true
#           schema:
#             $ref: "#/components/schemas/photoID"
#         - name: page
#           in: query
#           description: Page number
#           required: false
#           schema:
#             type: integer
#             minimum: 0
#             default: 0
#       responses:
#         "200":
#           description: List of users that liked the photo
#           content:
#             application/json:
#               schema:
#                 description: List of users that liked the photo
#                 type: array
#                 items:
#                   $ref: "#/components/schemas/like"
#                 minItems: 0
#                 maxItems: 30 #The stream is limited to 30 likes per chuck of data
#         "401":
#           $ref: "#/components/responses/Unauthorized"
#         "404":
#           $ref: "#/components/responses/NotFound"
#         "500":
#           $ref: "#/components/responses/InternalServerError"          

  /photos/{photoID}/comments:
    get:
      description: Returns the list of comments of the photo with the specified identifier (photoID)
      summary: Returns the list of comments of the photo
      tags: ["photo"]
      operationId: getPhotoComments
      parameters:
        - name: photoID
          in: path
          description: Photo identifier
          required: true
          schema:
            $ref: "#/components/schemas/photoID"
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of comments of the photo
          content:
            application/json:
              schema:
                description: List of comments of the photo
                type: array
                items:
                  $ref: "#/components/schemas/comment"
                minItems: 0
                maxItems: 30 #The stream is limited to 30 comment per chuck of data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"          

  /users:
    get:
      summary: Get the list of all users that match the specified username (start with)
      tags: ["users"]
      description: |
        Get the list of all users that match the specified username (start with)
      operationId: getUsers
      parameters:
        - name: username
          in: query
          description: Username
          required: true
          schema:
            $ref: "#/components/schemas/username"
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Users list retrieved successfully
          content:
            application/json:
              schema:
                description: Users list
                type: array
                minItems: 0
                maxItems: 30 #Limit the number of users returned in a single chunck to 30
                items:
                  $ref: "#/components/schemas/username"
                example:
                  [
                    "Maria",
                    "Marc",
                    "Elthon",
                  ]

        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"        

  /users/{userID}:
    parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
    get:
      tags: ["users"]
      summary: Get the requested user profile
      description: |
        Get the user's profile using the given identifier
      operationId: getUserProfile
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/profile"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"          

  /users/{userID}/username:
    parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
    put:
      summary: Update the username
      tags: ["profile"]
      description: |
        Update the username profile (if available)
      operationId: setMyUserName
      requestBody:
        description: newUserName
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/username"
        required: true
      responses:
        "204":
          description: User profile updated successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"          

  /users/{userID}/bans/{blockedID}:
    parameters:
      - name: blockedID
        in: path
        description: User to be blocked/unblocked
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
    put:
      tags: ["ban"]
      summary: Blocks a user
      description: |
        Block a user
      operationId: banUser
      responses:
        "204":
          description: User blocked successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"          
    delete: 
      tags: ["ban"]
      summary: Unblocks a user
      description: |
        Unblock a user
      operationId: unbanUser
      responses:
        "204":
          description: User unblocked successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      tags: ["ban"]
      summary: Check if a user is blocked (both ways)
      description: |
        Check if a user is blocked
      operationId: isUserBanned
      responses:
        "200":
          description: Status of the ban
          content:
            application/json:
              schema:
                description: Status of the ban
                type: boolean
                example: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"          

  /users/{userID}/followers/{followerID}:
    parameters:
      - name: userID
        in: path
        description: User ID to follow/unfollow
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
      - name: followerID
        in: path
        description: identifier of the user that wants to follow/unfollow (the logged user)
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
    put:
      tags: ["follow"]
      summary: Follow a user
      description: |
        Adds the logged user to the followers list of the user with the given identifier
      operationId: followUser
      responses:
        "204":
          description: User unfollowed successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"            
    delete:
      summary: Unfollow a user
      tags: ["follow"]
      description: |
        Removes the logged user from the followers list of the user with the given identifier
      operationId: unfollowUser
      responses:
        "204":
          description: User unfollowed successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"   
    get:
      tags: ["ban"]
      summary: Check follow
      description: |
        Check if a userID is following followerID
      operationId: isFollowing
      responses:
        "200":
          description: Status of the ban
          content:
            application/json:
              schema:
                description: Status of following
                type: boolean
                example: true
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"           

  /users/{userID}/photos/{photoID}/likes/{likeID}:
    parameters:
      - name: photoID
        in: path
        description: Photo to be liked/unliked
        required: true
        schema:
          type: integer
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
      - name: likeID
        in: path
        description: Like ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
    put:
      tags: ["photo"]
      summary: Like a photo
      description: |
        Adds the userID of the logged user to the likes list of the photo of the user with the given identifier
      operationId: likePhoto
      responses:
        "204":
          description: Photo liked successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"          
    delete:
      tags: ["photo"]
      summary: Unlike a photo
      description: |
        Removes the userID of the logged user from the likes list of the photo of the user with the given identifier
      operationId: unlikePhoto
      responses:
        "204":
          description: Photo liked successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"           

  /users/{userID}/photos/{photoID}/comments/{commentID}:
    parameters:
      - name: photoID
        in: path
        description: Photo to be commented
        required: true
        schema:
          type: integer
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
      - name: commentID
        in: path
        description: Comment to be deleted
        required: true
        schema:
          $ref: "#/components/schemas/commentID"
    delete:
      tags: ["photo"]
      summary: Delete a comment
      description: |
        Delete the comment with the given identifier
      operationId: uncommentPhoto
      responses:
        "204":
          description: Comment deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"          


  /users/{userID}/photos/{photoID}/comments:
    parameters:
      - name: photoID
        in: path
        description: Photo to be commented
        required: true
        schema:
          type: integer
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
    post:
      tags: ["photo"]
      summary: Comment a photo
      description: |
        Comment a photo
      operationId: commentPhoto
      requestBody:
        description: comment
        required: true
        content:
          application/json:
            schema:
              description: Text of the comment
              type: string
              example: Nice photo
              pattern: "^[a-zA-Z0-9 ]*$"
              minLength: 3
              maxLength: 256
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userID}/photos:
    parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
    get:
      parameters:
        - name: page
          in: query
          description: Photo's page number
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      tags: ["photo"]
      summary: Get the list of photo of the user in the path
      description: Get a list of the photo of the user in path (paginated in arrays of 30 elements)
      operationId: getPhotos
      responses:
        "200":
          description: Photos retrieved successfully
          content:
            application/json:
              schema:
                description: Photos of the user
                type: array
                minItems: 0
                maxItems: 30
                items:
                  $ref: "#/components/schemas/photo"
        "204":
          description: No photos found
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      tags: ["photo"]
      summary: Upload a photo
      description: |
        Upload a photo to the user's profile if the userID matches the logged user
      operationId: uploadPhoto
      requestBody:
        description: photo
        content:
          multipart/form-data:
            schema:
              description: Photo to be uploaded
              type: string
              format: binary
              minLength: 8388608 # 1MB
              maxLength: 83886080 # 10MB
        required: true
      responses:
        "201":
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/photoID"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /users/{userID}/photos/{photoID}:
    parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          $ref: "#/components/schemas/identifier"
      - name: photoID
        in: path
        description: PhotoID
        required: true
        schema:
          type: integer
    delete:
      tags: ["photo"]
      summary: Delete a photo
      description: |
        Delete the photo with the given identifier if the logged user is the owner of the photo
      operationId: deletePhoto
      responses:
        "204":
          description: Photo deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"          
