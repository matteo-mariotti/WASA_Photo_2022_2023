openapi: 3.0.0
info:
  title: WasaPhoto
  version: 0.0.1

servers:
  - url: https://localhost:8080
    description: Local server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    username:
      type: string
      example: "Maria"
      pattern: "ˆ.*?$"
      minLength: 3
      maxLength: 16

    comment:
      type: string
      example: "This is a comment"
      pattern: "ˆ.*?$"
      minLength: 1
      maxLength: 256
  
    userID:
      description: user identifier
      type: string


    photo:
      type: object
      properties:
        id:
          type: integer
          description: photo identifier     
        image:
            type: string
            format: binary
        likes:
            type: array
            items:
              $ref: "#/components/schemas/userID"
        comments:
            type: array
            items:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/userID"
                comment:
                  $ref: "#/components/schemas/comment"
              
    profile:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/username"
        photos:
          description: List of photos uploaded by the user
          type: array
          items:
            $ref: "#/components/schemas/photo"
        followers:
          type: array
          items:
            $ref: "#/components/schemas/userID"
        following:
          type: array
          items:
            $ref: "#/components/schemas/userID"



  responses:
    Unauthorized:
      description: Not authenticated
    Forbidden:
      description: Not authorized
        

security:
  - BearerAuth: []

paths:
  /session:
    post:
      security: [] #No security is required to login into the application
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: "ˆ.*?$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer or any other type of identifier
                    type: string
                    example: "abcdef012345"
  /profile:
    put:
      summary: Set the username to the one given in the path if available
      description: | 
          After the user login, using the parameter in the authorization 
          header recognises the user and changes its old username to the new one if the new one is available.
          Returns an available username otherwise
      operationId: setMyUserName
      parameters:
        - name: username
          in: query
          required: true
          description: the new username for the logged user
          schema:
            $ref: "#/components/schemas/username"
      responses:
        "200":
          description: Username changed successfully
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
        "409":
          description: The new username is not available, an available username is returned
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/username"
    get:
      summary: Get the profile of the user in the query
      description: | 
          Returns the profile of the user in the query.
      operationId: getUserProfile
      parameters:
        - name: username
          in: query
          required: true
          description: the username of the user
          schema:
            $ref: "#/components/schemas/username"
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/profile"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
          
  /profile/{photo}:
    parameters:
      - name: photo
        in: path
        required: true
        description: this is the photo id
        schema:
          type: integer
    post:
      summary: Upload a new photo
      description: | 
          Uploads a new photo with the given ID adding an element to the collection of the logged user, comments and likes are empty
      operationId: uploadPhoto
      requestBody:
        #TODO Ricontrollare questa parte e confrontarla con gli altri
        description: Photo to upload
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "201":
          description: Photo uploaded successfully
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
    delete:
      summary: deletes a photo
      description: | 
          Deletes the photo with the given ID removing an element from the collection
      operationId: deletePhoto
      responses:
        "200":
          description: Photo deleted successfully
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"

      
  
    

    
